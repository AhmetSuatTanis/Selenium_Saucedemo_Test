{"content": {"suites": {"0": {"status": {"total_pass": 4, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 2, "total_error": 1}, "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_add_education", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_add_continuing_education", "rerun": "0"}, "2": {"status": "ERROR", "message": "self = <test_myEducationLife.Test_MyEducation_Life object at 0x0000022094A05AD0>\n\n    def setup_method(self):\n        self.driver=webdriver.Chrome()\n        self.driver.maximize_window()\n        self.driver.get(giris_URL)\n        emailInput=self.waitForElementVisible((By.CSS_SELECTOR,email_CSS))\n        passwordInput=self.waitForElementVisible((By.CSS_SELECTOR,password_CSS))\n        loginButton=self.waitForElementVisible((By.CSS_SELECTOR,loginButton_CSS))\n        actions=ActionChains(self.driver)\n        actions.send_keys_to_element(emailInput,userEmail)\n        actions.send_keys_to_element(passwordInput,userPassword)\n        actions.click(loginButton)\n        actions.perform()\n        successPopupMessageClose=self.waitForElementVisible((By.CSS_SELECTOR,successPopupMessage_CSS))\n>       successPopupMessageClose.click()\n\negitimHayatim\\test_myEducationLife.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000022093993FD0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...07FF7CC7A18A4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC5FF57344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFC61A426B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=124.0.6367.119); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7CC831502+60802]\nE       \t(No symbol) [0x00007FF7CC7AAC02]\nE       \t(No symbol) [0x00007FF7CC667CE4]\nE       \t(No symbol) [0x00007FF7CC66DE26]\nE       \t(No symbol) [0x00007FF7CC6701DB]\nE       \t(No symbol) [0x00007FF7CC670280]\nE       \t(No symbol) [0x00007FF7CC6B8D14]\nE       \t(No symbol) [0x00007FF7CC6B7D37]\nE       \t(No symbol) [0x00007FF7CC6AAE8B]\nE       \t(No symbol) [0x00007FF7CC6DAB7A]\nE       \t(No symbol) [0x00007FF7CC6AA7C6]\nE       \t(No symbol) [0x00007FF7CC6DAD90]\nE       \t(No symbol) [0x00007FF7CC6FA224]\nE       \t(No symbol) [0x00007FF7CC6DA923]\nE       \t(No symbol) [0x00007FF7CC6A8FEC]\nE       \t(No symbol) [0x00007FF7CC6A9C21]\nE       \tGetHandleVerifier [0x00007FF7CCB3411D+3217821]\nE       \tGetHandleVerifier [0x00007FF7CCB760B7+3488055]\nE       \tGetHandleVerifier [0x00007FF7CCB6F03F+3459263]\nE       \tGetHandleVerifier [0x00007FF7CC8EB846+823494]\nE       \t(No symbol) [0x00007FF7CC7B5F9F]\nE       \t(No symbol) [0x00007FF7CC7B0EC4]\nE       \t(No symbol) [0x00007FF7CC7B1052]\nE       \t(No symbol) [0x00007FF7CC7A18A4]\nE       \tBaseThreadInitThunk [0x00007FFC5FF57344+20]\nE       \tRtlUserThreadStart [0x00007FFC61A426B1+33]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: StaleElementReferenceException\n", "test_name": "test_blankSpaces_error_messages", "rerun": "0"}, "3": {"status": "FAIL", "message": "   selenium.common.exceptions.TimeoutException: Message: \n   Stacktrace:\n   \tGetHandleVerifier [0x00007FF7CC831502+60802]\n   \t(No symbol) [0x00007FF7CC7AAC02]\n   \t(No symbol) [0x00007FF7CC667CE4]\n   \t(No symbol) [0x00007FF7CC6B6D4D]\n   \t(No symbol) [0x00007FF7CC6B6E1C]\n   \t(No symbol) [0x00007FF7CC6FCE37]\n   \t(No symbol) [0x00007FF7CC6DABBF]\n   \t(No symbol) [0x00007FF7CC6FA224]\n   \t(No symbol) [0x00007FF7CC6DA923]\n   \t(No symbol) [0x00007FF7CC6A8FEC]\n   \t(No symbol) [0x00007FF7CC6A9C21]\n   \tGetHandleVerifier [0x00007FF7CCB3411D+3217821]\n   \tGetHandleVerifier [0x00007FF7CCB760B7+3488055]\n   \tGetHandleVerifier [0x00007FF7CCB6F03F+3459263]\n   \tGetHandleVerifier [0x00007FF7CC8EB846+823494]\n   \t(No symbol) [0x00007FF7CC7B5F9F]\n   \t(No symbol) [0x00007FF7CC7B0EC4]\n   \t(No symbol) [0x00007FF7CC7B1052]\n   \t(No symbol) [0x00007FF7CC7A18A4]\n   \tBaseThreadInitThunk [0x00007FFC5FF57344+20]\n   \tRtlUserThreadStart [0x00007FFC61A426B1+33]\n", "test_name": "test_delete_education", "rerun": "0"}, "4": {"status": "FAIL", "message": "   AssertionError: Devam et butonu t\u0131klanabilir durumda\n   assert not True\n    +  where True = <bound method WebElement.is_enabled of <selenium.webdriver.remote.webelement.WebElement (session=\"3d20ccda09497a9d1d73584fa11a8e30\", element=\"f.9C72D420DEFC203BD74BB0962EA29F8F.d.785DD9BE181E680E2A0A95CAF888757E.e.187\")>>()\n    +    where <bound method WebElement.is_enabled of <selenium.webdriver.remote.webelement.WebElement (session=\"3d20ccda09497a9d1d73584fa11a8e30\", element=\"f.9C72D420DEFC203BD74BB0962EA29F8F.d.785DD9BE181E680E2A0A95CAF888757E.e.187\")>> = <selenium.webdriver.remote.webelement.WebElement (session=\"3d20ccda09497a9d1d73584fa11a8e30\", element=\"f.9C72D420DEFC203BD74BB0962EA29F8F.d.785DD9BE181E680E2A0A95CAF888757E.e.187\")>.is_enabled\n", "test_name": "test_continueButton_with_graduationYear_BUG", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_max_character_limit", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_min_character_limit", "rerun": "0"}}, "suite_name": "egitimHayatim/test_myEducationLife.py"}}}, "date": "May 04, 2024", "start_time": 1714774742.3874772, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "4", "fail": "2", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "7"}